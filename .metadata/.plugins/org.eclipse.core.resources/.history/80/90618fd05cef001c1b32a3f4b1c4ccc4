package org.generation.blogPessoal.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Optional;

import org.generation.blogPessoal.model.UserLogin;
import org.generation.blogPessoal.model.Usuario;
import org.generation.blogPessoal.repository.UsuarioRepository;
import org.generation.blogPessoal.service.UsuarioService;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestMethodOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
//determina a ordem da minha execução/programação
		public class UsuarioControllerTest {

	@Autowired
	private TestRestTemplate testRestTemplate;
	/**
	 * Injeta um objeto da Classe TestRestTemplate, responsável por fazer requisições HTTP (semelhante ao Postman)
	 */

	@Autowired
	private UsuarioService usuarioService;

	@Autowired 
	private UsuarioRepository usuarioRepository;




    @BeforeAll
    void start() {
	usuarioRepository.deleteAll();
	//Apaga todos os registros do banco de dados antes de iniciar os testes

     }

    @Test
    @Order(1)
    @DisplayName ("Cadastrar um Usuário")
    public void deveCriarUmUsuario() {
	     HttpEntity<Usuario> corpoRequisicao = new HttpEntity<Usuario>(new Usuario(0L, "PauloAntunes", "paulo_antunes@email.com.br", "13465278", "https://i.imgur.com/JR7kUFU.jpg"));
	     //Cria um objeto da Classe Usuario e insere dentro de um Objeto da Classe HttpEntity (Entidade HTTP)
			 
	     ResponseEntity<Usuario> corpoResposta = testRestTemplate
	    		 .exchange("/usuarios/cadastrar",HttpMethod.POST,corpoRequisicao,Usuario.class);
	     /**
			 * Cria um Objeto da Classe ResponseEntity (corpoResposta), que receberá a Resposta da Requisição que será 
			 * enviada pelo Objeto da Classe TestRestTemplate.
			 * 
			 * Na requisição HTTP será enviada a URL do recurso (/usuarios/cadastrar), o verbo (POST), a entidade
			 * HTTP criada acima (corpoRequisicao) e a Classe de retornos da Resposta (Usuario).
			 */
	     assertEquals(HttpStatus.CREATED,corpoResposta.getStatusCode());
	     /**
			 * Verifica se a requisição retornou o Status Code CREATED (201) 
			 * Se for verdadeira, o teste passa, se não, o teste falha.
			 */
	     assertEquals(corpoRequisicao.getBody().getNome(),corpoResposta.getBody().getNome());
	     assertEquals(corpoRequisicao.getBody().getUsuario(),corpoResposta.getBody().getUsuario());

}

     @Test
     @Order(2)
     @DisplayName("Não deve permitir duplicação do Usuário")
     public void naoDeveDuplicarUsuario() {
	
	      usuarioService.cadastrarUsuario(new Usuario(0L,"Maria Da Silva", "maria_silva@email.com.br", "13465278", "https://i.imgur.com/T12NIp9.jpg")); 
          HttpEntity<Usuario>corpoRequisicao = new HttpEntity<Usuario> (new Usuario(0L,"Maria Da Silva", "maria_silva@email.com.br", "13465278", "https://i.imgur.com/T12NIp9.jpg"));
          ResponseEntity<Usuario> corpoResposta = testRestTemplate
              .exchange("/usuarios/cadastrar",HttpMethod.POST, corpoRequisicao, Usuario.class);
          assertEquals(HttpStatus.BAD_REQUEST, corpoResposta.getStatusCode());
}
      @Test
      //pra ser aprovado, todos devem ser aprovados, ou seja, retornar true
      @Order(3)
      @DisplayName("Alterar um Usuário")
      public void deveAtualizarUmUsuario() {
	
	       Optional<Usuario> usuarioCadastrado = usuarioService.cadastrarUsuario(new Usuario(0L,
			"Juliana Andrews", "juliana_andrews@email.com.br", "juliana123", "https://i.imgur.com/yDRVeK7.jpg"));
	       Usuario usuarioUpdate = new Usuario(usuarioCadastrado.get().getId(),
	    		   "Juliana Andrews Ramos", "juliana_ramos@email.com.br", "juliana123", "https://i.imgur.com/yDRVeK7.jpg");
	       HttpEntity<Usuario> corpoRequisicao = new HttpEntity<Usuario>(usuarioUpdate);
	       ResponseEntity<Usuario> corpoResposta = testRestTemplate
			  .withBasicAuth("root", "root")
			  .exchange("/usuarios/atualizar", HttpMethod.PUT, corpoRequisicao, Usuario.class);
	       assertEquals(HttpStatus.OK,corpoResposta.getStatusCode());
	       assertEquals(corpoRequisicao.getBody().getNome(), corpoResposta.getBody().getNome());
	       assertEquals(corpoRequisicao.getBody().getUsuario(), corpoResposta.getBody().getUsuario());

	
}

      @Test
      @Order(4)
      @DisplayName("Listar todos os usuários")
      public void deveMostrarTodosUsuarios() {
	
	       usuarioService.cadastrarUsuario(new Usuario(0L,
			"Sabrina Sanches", "sabrina_sanches@email.com.br", "sabrina123", "https://i.imgur.com/5M2p5Wb.jpg"));
	
           usuarioService.cadastrarUsuario(new Usuario(0L,
			"Ricardo Marques", "ricardo_marques@email.com.br", "ricardo123", "https://i.imgur.com/Sk5SjWE.jpg"));
           
           ResponseEntity<String> resposta = testRestTemplate
        		   .withBasicAuth("root", "root")
        		   .exchange("/usuarios/all", HttpMethod.GET, null, String.class);
           assertEquals(HttpStatus.OK, resposta.getStatusCode());
  }

      @Test
      @Order(5)
      @DisplayName("Lista Um Usuário Específico")
      public void deveListarApenasUmUsuario() {
    	  
    	  Optional<Usuario> usuarioBusca = usuarioService.cadastrarUsuario(new Usuario(0L,
    			  "Luara Santolia", "luara_santolia@email.com.br", "laura12345", "https://i.imgur.com/EcJG8kB.jpg"));
    	  ResponseEntity<String> resposta = testRestTemplate
    			  .withBasicAuth("root", "root")
    			  .exchange("/usuarios/" + usuarioBusca.get().getId(), HttpMethod.GET, null, String.class);
    	  assertEquals(HttpStatus.OK, resposta.getStatusCode());
      }
      
      @Test
      @Order(6)
      @DisplayName("Login do Usuário")
      public void deveAutenticarUsuario() {
    	  usuarioService.cadastrarUsuario(new Usuario(0L,
    			  "Maria Souza", "maria_souza@email.com.br", "13465278", "https://i.imgur.com/T12NIp9.jpg"));
    	  HttpEntity<UserLogin> corpoRequisicao = new HttpEntity<UserLogin>(new UserLogin(0L,
    			  "", "maria_souza@email.com.br", "13465278", "", ""));
    	  ResponseEntity<UserLogin> corpoResposta = testRestTemplate
    			  .exchange("/usuarios/logar", HttpMethod.POST, corpoRequisicao, UserLogin.class);
    	  assertEquals(HttpStatus.OK, corpoResposta.getStatusCode());
      }
 } 