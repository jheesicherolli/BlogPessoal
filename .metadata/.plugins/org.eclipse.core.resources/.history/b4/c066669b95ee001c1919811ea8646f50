package org.generation.blogPessoal.service;

import java.nio.charset.Charset;
import java.util.Optional;

import org.apache.commons.codec.binary.Base64;
import org.generation.blogPessoal.model.UserLogin;
import org.generation.blogPessoal.model.Usuario;
import org.generation.blogPessoal.repository.UsuarioRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;


@Service
//indica que é uma classe de serviço, que implementa todas as regras de negócio do Recurso Usuário
public class UsuarioService {
	/**
	 *  A Classe UsuarioService implementa as regras de negócio do Recurso Usuario.
	 *  
	 *  Regras de negócio são as particularidades das funcionalidades a serem 
	 *  implementadas no objeto, tais como:
	 *  
	 *  1) O Usuário não pode estar duplicado no Banco de dados
	 *  2) A senha do Usuario deve ser criptografada
	 *  
	 *  Observe que toda a implementação dos metodos Cadastrar, Atualizar e 
	 *  Logar estão implmentadas na classe de serviço, enquanto a Classe
	 *  Controller se limitará a checar a resposta da requisição.
	 */

	@Autowired
	private UsuarioRepository usuarioRepository;
	
	public Optional<Usuario> cadastrarUsuario(Usuario usuario) {
		
		/**
		 *  Cadastrar Usuário
		 * 
		 *  Checa se o usuário já existe no Banco de Dados através do método findByUsuario, 
		 *  porquê não pode existir 2 usuários com o mesmo email. 
		 *  Se não existir retorna um Optional vazio.
		 *  
		 *  isPresent() -> Se um valor estiver presente retorna true, caso contrário
		 *  retorna false.
		 * 
		 *  empty -> Retorna uma instância de Optional vazia.
		 */
		
		if (usuarioRepository.findByUsuario(usuario.getUsuario()).isPresent())
			/*isPresent() -> Se um valor estiver presente retorna true, caso contrário
			 *  retorna false.*/
		return Optional.empty();
		//empty -> Retorna uma instância de Optional vazia.
		usuario.setSenha(criptografarSenha(usuario.getSenha()));
		/**
		 * Se o Usuário não existir no Banco de Dados, a senha será criptografada
		 * através do Método criptografarSenha.
		 */
		return Optional.of(usuarioRepository.save(usuario));
		/**
		 * Assim como na Expressão Lambda, o resultado do método save será retornado dentro
		 * de um Optional, com o Usuario persistido no Banco de Dados.
		 * 
		 * of​ -> Retorna um Optional com o valor fornecido, mas o valor não pode ser nulo. 
		 * Se não tiver certeza de que o valor não é nulo use ofNullable.
		 */
		
	}
	
	public Optional<Usuario> atualizarUsuario(Usuario usuario) {

		/**
		 *  Atualizar Usuário
		 * 
		 *  Checa se o usuário já existe no Banco de Dados através do método findById, 
		 *  porquê não é possíve atualizar 1 usuário inexistente. 
		 *  Se não existir retorna um Optional vazio.
		 * 
		 */
	
		if(usuarioRepository.findById(usuario.getId()).isPresent()) {
			/*isPresent() -> Se um valor estiver presente retorna true, caso contrário
			  retorna false.*/
					
			Optional<Usuario> buscaUsuario = usuarioRepository.findByUsuario(usuario.getUsuario());
			 if( (buscaUsuario.isPresent()) && (buscaUsuario.get().getId() != usuario.getId()))
							throw new ResponseStatusException(
									HttpStatus.BAD_REQUEST, "Usuário já existe!", null);
							
							
							usuario.setSenha(criptografarSenha(usuario.getSenha()));
							
							return Optional.ofNullable(usuarioRepository.save(usuario));
							
							
						
			}
				return Optional.empty();
				
	}
	
	public Optional<UserLogin> autenticarUsuario(Optional<UserLogin> userLogin) {
		Optional<Usuario> usuario = usuarioRepository.findByUsuario(userLogin.get().getUsuario());
		if (usuario.isPresent()) {
			if(compararSenhas(userLogin.get().getSenha(), usuario.get().getSenha())) {
				userLogin.get().setId(usuario.get().getId());
				userLogin.get().setNome(usuario.get().getNome());
				userLogin.get().setFoto(usuario.get().getFoto());
				userLogin.get().setToken(gerarBasicToken(userLogin.get().getUsuario(), userLogin.get().getSenha()));
				userLogin.get().setSenha(usuario.get().getSenha());
				
				return userLogin;
			}
		}
		return Optional.empty();
	}
	
	private String criptografarSenha(String senha) {
		
		BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
		
		return encoder.encode(senha);
	}
	
	private boolean compararSenhas(String senhaDigitada, String senhaBanco) {
		
		BCryptPasswordEncoder encoder = new BCryptPasswordEncoder ();
		
		return encoder.matches(senhaDigitada, senhaBanco);
	}
	
	private String gerarBasicToken(String usuario, String senha) {
		
		String token = usuario + ":" + senha;
		byte[] tokenBase64 = Base64.encodeBase64(token.getBytes(Charset.forName("US-ASCII")));
		return "Basic" + new String(tokenBase64);

	}
}
